<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0048)http://compsoc.dur.ac.uk/whitespace/tutorial.php -->
<HTML><HEAD><TITLE>Whitespace Tutorial</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8"><LINK 
href="Whitespace Tutorial_files/home.css" type=text/css rel=STYLESHEET>
<META content="MSHTML 6.00.2800.1264" name=GENERATOR></HEAD>
<BODY>
<TABLE class=layout>
  <TBODY>
  <TR>
    <TH colSpan=2>
      <H1>Whitespace Tutorial</H1></TH></TR>
  <TR>
    <TD class=layout width="10%">
      <P><A 
      href="http://compsoc.dur.ac.uk/whitespace/index.php">Whitespace</A><BR>Tutorial<BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/examples.php">Examples</A><BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/contrib.php">Contributions</A><BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/download.php">Download</A><BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/tools.php">Tools</A><BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/feedback.php">Feedback</A><BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/mailinglist.php">Mailing 
      List</A><BR><A 
      href="http://compsoc.dur.ac.uk/whitespace/explanation.php">Explanation</A><BR></P></TD>
    <TD class=main width="90%">
      <H2>Whitespace tutorial</H2>
      <P>The only lexical tokens in the whitespace language are <EM>Space</EM> 
      (ASCII 32), <EM>Tab</EM> (ASCII 9) and <EM>Line Feed</EM> (ASCII 10). By 
      only allowing line feed as a token, CR/LF problems are avoided across 
      DOS/Unix file conversions. (<EM>Um, not sure. Maybe we'll sort this in a 
      later version.</EM>). </P>
      <P>The language itself is an imperative, stack based language. Each 
      command consists of a series of tokens, beginning with the <EM>Instruction 
      Modification Parameter</EM> (IMP). These are listed in the table below. 
      </P>
      <TABLE>
        <TBODY>
        <TR>
          <TH>IMP</TH>
          <TH>Meaning</TH></TR>
        <TR>
          <TD>[Space]</TD>
          <TD>Stack Manipulation</TD></TR>
        <TR>
          <TD>[Tab][Space]</TD>
          <TD>Arithmetic</TD></TR>
        <TR>
          <TD>[Tab][Tab]</TD>
          <TD>Heap access</TD></TR>
        <TR>
          <TD>[LF]</TD>
          <TD>Flow Control</TD></TR>
        <TR>
          <TD>[Tab][LF]</TD>
          <TD>I/O</TD></TR></TBODY></TABLE>
      <P>The virtual machine on which programs run has a stack and a heap. The 
      programmer is free to push arbitrary width integers onto the stack (only 
      integers, currently there is no implementation of floating point or real 
      numbers). The heap can also be accessed by the user as a permanent store 
      of variables and data structures. </P>
      <P>Many commands require numbers or labels as parameters. Numbers can be 
      any number of bits wide, and are simply represented as a series of [Space] 
      and [Tab], terminated by a [LF]. [Space] represents the binary digit 0, 
      [Tab] represents 1. The sign of a number is given by its first character, 
      [Space] for positive and [Tab] for negative. Note that this is 
      <EM>not</EM> twos complement, it just indicates a sign. </P>
      <P>Labels are simply [LF] terminated lists of spaces and tabs. There is 
      only one global namespace so all labels must be unique. </P>
      <H3>Stack Manipulation (IMP: [Space]) </H3>
      <P>Stack manipulation is one of the more common operations, hence the 
      shortness of the IMP [Space]. There are four stack instructions. </P>
      <TABLE>
        <TBODY>
        <TR>
          <TH>Command</TH>
          <TH>Parameters</TH>
          <TH>Meaning</TH></TR>
        <TR>
          <TD>[Space]</TD>
          <TD>Number</TD>
          <TD>Push the number onto the stack</TD></TR>
        <TR>
          <TD>[LF][Space]</TD>
          <TD>-</TD>
          <TD>Duplicate the top item on the stack</TD></TR>
        <TR>
          <TD>[LF][Tab]</TD>
          <TD>-</TD>
          <TD>Swap the top two items on the stack</TD></TR>
        <TR>
          <TD>[LF][LF]</TD>
          <TD>-</TD>
          <TD>Discard the top item on the stack</TD></TR></TBODY></TABLE>
      <H3>Arithmetic (IMP: [Tab][Space]) </H3>
      <P>Arithmetic commands operate on the top two items on the stack, and 
      replace them with the result of the operation. The first item pushed is 
      considered to be <EM>left</EM> of the operator. </P>
      <TABLE>
        <TBODY>
        <TR>
          <TH>Command</TH>
          <TH>Parameters</TH>
          <TH>Meaning</TH></TR>
        <TR>
          <TD>[Space][Space]</TD>
          <TD>-</TD>
          <TD>Addition</TD></TR>
        <TR>
          <TD>[Space][Tab]</TD>
          <TD>-</TD>
          <TD>Subtraction</TD></TR>
        <TR>
          <TD>[Space][LF]</TD>
          <TD>-</TD>
          <TD>Multiplication</TD></TR>
        <TR>
          <TD>[Tab][Space]</TD>
          <TD>-</TD>
          <TD>Integer Division</TD></TR>
        <TR>
          <TD>[Tab][Tab]</TD>
          <TD>-</TD>
          <TD>Modulo</TD></TR></TBODY></TABLE>
      <H3>Heap Access (IMP: [Tab][Tab])</H3>
      <P>Heap access commands look at the stack to find the address of items to 
      be stored or retrieved. To store an item, push the address then the value 
      and run the store command. To retrieve an item, push the address and run 
      the retrieve command, which will place the value stored in the location at 
      the top of the stack. </P>
      <TABLE>
        <TBODY>
        <TR>
          <TH>Command</TH>
          <TH>Parameters</TH>
          <TH>Meaning</TH></TR>
        <TR>
          <TD>[Space]</TD>
          <TD>-</TD>
          <TD>Store</TD></TR>
        <TR>
          <TD>[Tab]</TD>
          <TD>-</TD>
          <TD>Retrieve</TD></TR></TBODY></TABLE>
      <H3>Flow Control (IMP: [LF])</H3>
      <P>Flow control operations are also common. Subroutines are marked by 
      labels, as well as the targets of conditional and unconditional jumps, by 
      which loops can be implemented. Programs must be ended by means of 
      [LF][LF][LF] so that the interpreter can exit cleanly. </P>
      <TABLE>
        <TBODY>
        <TR>
          <TH>Command</TH>
          <TH>Parameters</TH>
          <TH>Meaning</TH></TR>
        <TR>
          <TD>[Space][Space]</TD>
          <TD>Label</TD>
          <TD>Mark a location in the program</TD></TR>
        <TR>
          <TD>[Space][Tab]</TD>
          <TD>Label</TD>
          <TD>Call a subroutine</TD></TR>
        <TR>
          <TD>[Space][LF]</TD>
          <TD>Label</TD>
          <TD>Jump unconditionally to a label</TD></TR>
        <TR>
          <TD>[Tab][Space]</TD>
          <TD>Label</TD>
          <TD>Jump to a label if the top of the stack is zero</TD></TR>
        <TR>
          <TD>[Tab][Tab]</TD>
          <TD>Label</TD>
          <TD>Jump to a label if the top of the stack is negative</TD></TR>
        <TR>
          <TD>[Tab][LF]</TD>
          <TD>-</TD>
          <TD>End a subroutine and transfer control back to the caller</TD></TR>
        <TR>
          <TD>[LF][LF]</TD>
          <TD>-</TD>
          <TD>End the program</TD></TR></TBODY></TABLE>
      <H3>I/O (IMP: [Tab][LF])</H3>
      <P>Finally, we need to be able to interact with the user. There are IO 
      instructions for reading and writing numbers and individual characters. 
      With these, string manipulation routines can be written (see <A 
      href="http://compsoc.dur.ac.uk/whitespace/examples.php">examples</A> to 
      see how this may be done). </P>
      <P>The <EM>read</EM> instructions take the heap address in which to store 
      the result from the top of the stack. </P>
      <TABLE>
        <TBODY>
        <TR>
          <TH>Command</TH>
          <TH>Parameters</TH>
          <TH>Meaning</TH></TR>
        <TR>
          <TD>[Space][Space]</TD>
          <TD>-</TD>
          <TD>Output the character at the top of the stack</TD></TR>
        <TR>
          <TD>[Space][Tab]</TD>
          <TD>-</TD>
          <TD>Output the number at the top of the stack</TD></TR>
        <TR>
          <TD>[Tab][Space]</TD>
          <TD>-</TD>
          <TD>Read a character and place it in the location given by the top 
            of the stack</TD></TR>
        <TR>
          <TD>[Tab][Tab]</TD>
          <TD>-</TD>
          <TD>Read a number and place it in the location given by the top of 
            the stack</TD></TR></TBODY></TABLE>
      <H3>Annotated Example</H3>
      <P>Here is an annotated example of a program which counts from 1 to 10, 
      outputting the current value as it goes. </P>
      <TABLE border=1>
        <TBODY>
        <TR>
          <TD>[Space][Space][Space][Tab][LF]</TD>
          <TD>Put a 1 on the stack</TD></TR>
        <TR>
          <TD>[LF][Space][Space][Space][Tab][Space][Space] 
            [Space][Space][Tab][Tab][LF] </TD>
          <TD>Set a Label at this point</TD></TR>
        <TR>
          <TD>[Space][LF][Space]</TD>
          <TD>Duplicate the top stack item</TD></TR>
        <TR>
          <TD>[Tab][LF][Space][Tab]</TD>
          <TD>Output the current value</TD></TR>
        <TR>
          <TD>[Space][Space][Space][Tab][Space][Tab][Space][LF]</TD>
          <TD>Put 10 (newline) on the stack...</TD></TR>
        <TR>
          <TD>[Tab][LF][Space][Space]</TD>
          <TD>...and output the newline</TD></TR>
        <TR>
          <TD>[Space][Space][Space][Tab][LF]</TD>
          <TD>Put a 1 on the stack</TD></TR>
        <TR>
          <TD>[Tab][Space][Space][Space]</TD>
          <TD>Addition. This increments our current value.</TD></TR>
        <TR>
          <TD>[Space][LF][Space]</TD>
          <TD>Duplicate that value so we can test it</TD></TR>
        <TR>
          <TD>[Space][Space][Space][Tab][Space][Tab][Tab][LF]</TD>
          <TD>Push 11 onto the stack</TD></TR>
        <TR>
          <TD>[Tab][Space][Space][Tab]</TD>
          <TD>Subtraction. So if we've reached the end, we have a zero on the 
            stack.</TD></TR>
        <TR>
          <TD>[LF][Tab][Space][Space][Tab][Space][Space] 
            [Space][Tab][Space][Tab][LF]</TD>
          <TD>If we have a zero, jump to the end </TD></TR>
        <TR>
          <TD>[LF][Space][LF][Space][Tab][Space] 
            [Space][Space][Space][Tab][Tab][LF]</TD>
          <TD>Jump to the start</TD></TR>
        <TR>
          <TD>[LF][Space][Space][Space][Tab][Space] 
            [Space][Space][Tab][Space][Tab][LF] </TD>
          <TD>Set the end label</TD></TR>
        <TR>
          <TD>[Space][LF][LF]</TD>
          <TD>Discard our accumulator, to be tidy</TD></TR>
        <TR>
          <TD>[LF][LF][LF]</TD>
          <TD>Finish</TD></TR></TBODY></TABLE>
      <P>What could be simpler? The source code for this program is available <A 
      href="http://compsoc.dur.ac.uk/whitespace/count.ws">here</A>. Have fun! 
      </P><!-- -*-HTML-*- -->
      <HR>

      <P><A href="mailto:e.c.brady@dur.ac.uk"><EM>e.c.brady@dur.ac.uk</EM></A> 
      April 1st, 2003 </P></TD></TR></TBODY></TABLE></BODY></HTML>
